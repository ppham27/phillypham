include ../mixins/postView.jade

mixin imgFallback(src)
  img(src=src, onerror="this.src = '/images/default-profile.jpg';")

mixin commentView(comment, offset)
  - var children = comments.filter(function(child) { return comment.id === child.commentId; })
  .comment(class="comment-" + comment.id, style={'margin-left': offset ? 30 + "px" : "0px"})
    a(name="comment-" + comment.id, style={height: '0px'})
    .comment-content
      a.user-link(href='/user/' + encodeURIComponent(comment.User.displayName), target="_blank")
        .photo
          +imgFallback(comment.User.photoUrl)
        div= comment.User.displayName
      .wmd-preview!= comment.bodyHtml
    .footer
      .left                        
        span.reply-expander&attributes({"data-comment-id": comment.id})
          div.bullet
            span &#8227; 
          span.reply= children.length === 1 ? '1 reply' : children.length + ' replies'
        .share-div.spacer
        button.reply(type="button")&attributes({"data-comment-id": comment.id}) Reply
      .right
        if (locals.user && (comment.User.id === user.id || roles['comment_editor']))        
          button.edit(type="button")&attributes({"data-comment-id": comment.id}) Edit
          button.destroy(type="button")&attributes({"data-comment-id": comment.id}) Destroy
    hr
    .children(style={'margin-left': 30 + "px"}, class="comment-" + comment.id)
      .inner-children
        each child in children
          +commentView(child, 1)
  
  
extends ../layout

block content
  +postView(temporaryPost, false, true)
  hr
  .comments
    - var unpublishedComments = temporaryPost.Comments.filter(function(comment) { return !comment.published && (locals.user && (roles['comment_editor'] || comment.User.id === locals.user.id)); }).sort(function(a, b) { return a.created_at - b.created_at; })
    if (unpublishedComments.length)
      h2 Unpublished Comments
      .wmd-preview
        table
          tr
            th ID
            th User
            th Created At            
            th Edit
            th Destroy
          each comment in unpublishedComments
            tr
              td= comment.id
              td= comment.User.displayName
              td= comment.created_at.toUTCString()
              td
                button.edit(type="button")&attributes({"data-comment-id": comment.id}) Edit
              td
                button.destroy(type="button")&attributes({"data-comment-id": comment.id}) Destroy
              
      hr
    h2
      a(name="new-comment") New Comment
    form.comment-editor(method="POST", action="comment", onsubmit="return false;")
      #comment-reply
      #wmd-button-bar-comment.wmd-button-bar
      #wmd-editor-comment.wmd-editor
      textarea#wmd-input-comment.wmd-input(name="body")
      .comment.new-comment
        .comment-content
          a.user-link(href=locals.user ? '/user/' + encodeURIComponent(user.displayName) : '/login', target=locals.user ? "_blank" : "_self")
            .photo
              +imgFallback(locals.user ? user.photoUrl : '/images/default-profile.jpg')
            .display-name!= locals.user ? user.displayName : 'Please log in'
          #wmd-preview-comment.wmd-preview
      .buttons
        button.submit-button(disabled=true) Save Draft
          .overlay
        button.submit-button(disabled=true) Comment
          .overlay
        button.submit-button(disabled=true) Destroy
          .overlay
        button.submit-button(disabled=true, style={display: 'none'}) Reset
          .overlay
      hr    
    h2
      a(name="comments") Comments
    - var comments = temporaryPost.Comments.filter(function(comment) { return comment.published; }).sort(function(a, b) { return a.publishedAt - b.publishedAt; })
    if (comments.length === 0)
      p No comments have been posted yet. You can be the first!
    .posted-comments
      each comment in comments.filter(function(comment) { return comment.commentId === null; })
        +commentView(comment, 0)

append head
  meta(property="fb:app_id", content=settings.config.appKeys.facebook.clientID)
  meta(property="og:title", content=temporaryPost.title)
  meta(property="og:site_name", content=settings.ApplicationSettings.title)
  meta(property="og:url", content=settings.config.siteUrl + '/' + encodeURIComponent(temporaryPost.title))
  meta(property="og:description", content=temporaryPost.body.substr(0, 600))
  meta(property="og:type", content="article")
  meta(property="article:author", content=temporaryPost.User.displayName) 
  if (temporaryPost.photoUrl)
    meta(property="og:image", content=temporaryPost.photoUrl[0] === '/' ? settings.config.siteUrl + temporaryPost.photoUrl : temporaryPost.photoUrl)
  if (settings.ApplicationSettings['contact:twitter'])
    meta(name="twitter:card", content="summary_large_image")
    meta(name="twitter:site", content="@" + settings.ApplicationSettings['contact:twitter'])
    meta(name="twitter:title", content=temporaryPost.title)
    meta(name="twitter:description", content=temporaryPost.body.substr(0, 600))
    if (temporaryPost.photoUrl)
      meta(name="twitter:image", content=temporaryPost.photoUrl[0] === '/' ? settings.config.siteUrl + temporaryPost.photoUrl : temporaryPost.photoUrl)

append body
  script
    include ../../public/javascripts/flash.js
  script.
    var replyId = null;
    Array.prototype.slice.call(document.querySelectorAll('.reply-expander'))
    .forEach(function(replyExpander) {
      replyExpander.addEventListener('click', expandReplies);
    });
    Array.prototype.slice.call(document.querySelectorAll('button.reply'))
    .forEach(function(replyButton) {
      replyButton.addEventListener('click', replyHandle);
    });
    Array.prototype.slice.call(document.querySelectorAll('button.edit'))
    .forEach(function(editButton) {
      editButton.addEventListener('click', editHandle);
    });
    Array.prototype.slice.call(document.querySelectorAll('button.destroy'))
    .forEach(function(destroyButton) {
      destroyButton.addEventListener('click', destroyHandle);
    });    
    var postRequest = new XMLHttpRequest();
    var putRequest = new XMLHttpRequest();
    var deleteRequest = new XMLHttpRequest();
    var editGetRequest = new XMLHttpRequest();
    putRequest.addEventListener('load', function() {
      var response = typeof this.response === 'string' ? JSON.parse(this.response) : this.response;
      onRequestLoad(response);
      toggleButtons(false);
    });
    deleteRequest.addEventListener('load', function() {
      var response = typeof this.response === 'string' ? JSON.parse(this.response) : this.response;
      onRequestLoad(response);
      toggleButtons(false);
    });
    postRequest.addEventListener('load', function() {
      var response = typeof this.response === 'string' ? JSON.parse(this.response) : this.response;
      onRequestLoad(response);
      toggleButtons(false);
    });
    editGetRequest.addEventListener('load', function() {
      var response = typeof this.response === 'string' ? JSON.parse(this.response) : this.response;
      if (response.error) {
        flash(response.error, {reset: true, className: 'error'});
      } else {
        fillReplyPreview(response.commentId);
        fillCommentPreview(response);
        setupEdit(response.id, response.published);        
      }
      setTimeout(function() {
        document.querySelector('a[name="new-comment"]').scrollIntoView();        
        editors[0].editor.focus();
        editors[0].editor.clearSelection();
      }, 500);
    });
    if (window.location.hash) {
      if (window.location.hash.substr(0, 9) === '#comment-') {
        var hashedComment = document.querySelector('.' + window.location.hash.substr(1));
        expandParent(hashedComment);
        window.location.href = window.location.hash;
        setupCreate();
      } else if (window.location.hash.substr(0, 14) === '#edit-comment-') {
        editComment(window.location.hash.slice(14));
      } else if (window.location.hash === '#new-comment') {
        setupCreate();
        editors[0].editor.focus();
      } else {
        setupCreate();
      }
    } else {
      setupCreate();
    }
    toggleButtons(false);
    function editComment(id) {
      if (document.querySelector('.posted-comments .comment-' + id)) expandParent(document.querySelector('.posted-comments .comment-' + id));
      editGetRequest.abort();
      editGetRequest.open('GET', window.location.pathname + '/comment/' + id);
      editGetRequest.setRequestHeader('Accept', 'application/json');
      editGetRequest.responseType = 'json';
      editGetRequest.send();      
    }
    function postComment(options, event) {
      toggleButtons(true);
      var request = postRequest;
      request.abort();
      request.open('POST', window.location.pathname + '/comment');
      request.setRequestHeader('Accept', 'application/json');
      request.setRequestHeader('Content-Type', 'application/json');
      request.responseType = 'json';
      var json = { published: options.published || null,
                   commentId: options.replyId || replyId,
                   body: getCommentBody()};
      request.send(JSON.stringify(json));
      return false;      
    }
    function putComment(options, event) {
      toggleButtons(true);
      var id = options.id;
      var published = options.published;
      var request = putRequest;
      request.abort();
      request.open('PUT', window.location.pathname + '/comment/' + id);
      request.setRequestHeader('Content-Type', 'application/json');
      request.responseType = 'json';
      var json = { commentId: options.replyId || replyId,
                   body: getCommentBody() };
      if (options.published !== undefined) json.published = options.published;
      request.send(JSON.stringify(json));
      return false;
    }
    function setupEdit(id, published) {      
      document.querySelector('a[name="new-comment"]').textContent = 'Edit Comment';
      var buttons = document.querySelectorAll('form.comment-editor .buttons button.submit-button');
      if (!published) {
        setButtonLabel(buttons[0], 'Save');
        buttons[0].onclick = putComment.bind(buttons[0], { id: id });
        setButtonLabel(buttons[1], 'Publish');
        buttons[1].onclick = putComment.bind(buttons[1], { id: id, published: true });
        setButtonLabel(buttons[2], 'Destroy');
        buttons[2].onclick = destroyHandle.bind({dataset: {commentId: id}});
        setButtonLabel(buttons[3], 'Reset');
        buttons[3].onclick = resetCommentEditor;
        buttons[3].style.display = null;        
      } else {
        setButtonLabel(buttons[0], 'Save');
        buttons[0].onclick = putComment.bind(buttons[0], { id: id });        
        setButtonLabel(buttons[1], 'Destroy');
        buttons[1].onclick = destroyHandle.bind({dataset: {commentId: id}});
        setButtonLabel(buttons[2], 'Reset');
        buttons[2].onclick = resetCommentEditor;
        buttons[3].style.display = 'none';
        buttons[3].onclick = function() { return false; }
      }
    }
    function setupCreate() {
      document.querySelector('a[name="new-comment"]').textContent = 'New Comment';
      var buttons = document.querySelectorAll('form.comment-editor .buttons button.submit-button');
      setButtonLabel(buttons[0], 'Save Draft');
      buttons[0].onclick = postComment.bind(buttons[0], {published: false});
      setButtonLabel(buttons[1], 'Comment');
      buttons[1].onclick = postComment.bind(buttons[0], {published: true});
      setButtonLabel(buttons[2], 'Reset');
      buttons[2].onclick = resetCommentEditor;
      buttons[3].style.display = 'none';
      buttons[3].onclick = function() { return false; }
    }
    function fillCommentPreview(comment) {
      editors[0].editor.setValue(comment.body);
      document.querySelector('.comment-editor .comment.new-comment .photo img').src = comment.User.photoUrl;
      document.querySelector('.comment-editor .comment.new-comment .user-link').href = '/user/' + encodeURIComponent(comment.User.displayName);
      document.querySelector('.comment-editor .comment.new-comment .user-link .display-name').textContent = comment.User.displayName;
    }
    function fillReplyPreview(id) {
      var commentReply = document.getElementById('comment-reply');
      if (id) {
        var clonedComment = document.querySelector('.comment-' + id).cloneNode(true);
        clonedComment.style.marginLeft = null;
        var children = clonedComment.querySelector('.children');
        if (children !== null) clonedComment.removeChild(children);
        var footer = clonedComment.querySelector('.footer');
        if (footer !== null) clonedComment.removeChild(footer);
        commentReply.innerHTML = "<h3>Replying to...</h3>";
        commentReply.appendChild(clonedComment);
        replyId = parseInt(id);
      } else {
        commentReply.innerHTML = null;
        replyId = null;
      }
    }
    function replyHandle() {
      fillReplyPreview(this.dataset.commentId);      
      window.location.href = '#new-comment';
      editors[0].editor.focus();
      return false;
    }
    function editHandle() {
      var id = this.dataset.commentId;
      window.location.hash = '#edit-comment-' + id;
      return editComment(id);      
    }
    function destroyHandle() {
      if (confirm('Are you sure you want to delete this comment?')) {
        var id = this.dataset.commentId;
        var request = deleteRequest;
        request.abort();
        request.open('DELETE', window.location.pathname + '/comment/' + id);
        request.setRequestHeader('Accept', 'application/json');
        request.responseType = 'json';
        request.send();
      }
      return false;
    }
    function expandParent(node) {
      if (node.classList.contains('comments')) return;
      if (node.classList.contains('children')) {
        node.parentNode.querySelector('.reply-expander').classList.add('expanded');
        node.classList.add('expanded');
      }
      expandParent(node.parentNode);
    }
    function expandReplies() {
      var children = document.querySelector('.children.comment-' + this.dataset.commentId);
      if (this.classList.contains('expanded')) {
        children.style.height = children.getBoundingClientRect().height + 'px';        
        setTimeout(function() { children.style.height = null; }, 0);
        this.classList.remove('expanded');
        children.classList.remove('expanded');
      } else {
        children.style.height = '0px';
        setTimeout(function() {
          var height = children.querySelector('.inner-children').getBoundingClientRect().height;
          children.style.height = height + 'px';
          setTimeout(function() {
            children.style.height = null;
          }, 500);
        }, 0)
        this.classList.add('expanded');
        children.classList.add('expanded');
      }
    }
    function toggleButtons(disabled) {
       Array.prototype.slice.call(document.querySelectorAll('form.comment-editor .buttons button.submit-button'))
       .forEach(function(button) {
         button.disabled = disabled;
       });  
    }

    function getCommentBody() {
      return document.getElementById('wmd-input-comment').value;
    }

    function onRequestLoad(response) {
      if (response.success) {
        if (response.redirect) {
          window.onhashchange = function() { window.location.reload(); }
          window.location.href = response.redirectLink;
        } else {
          flash(response.message, {reset: true, className: 'info'});
          cleanUp();
        }        
      } else {
        flash(response.error, {reset: true, className: 'error'});
        cleanUp();
      }
      function cleanUp() {
        setTimeout(function() {
          var flashBox = document.getElementById('flash');
          flashBox.style.height = window.getComputedStyle(flashBox).getPropertyValue('height');
          flashBox.style.opacity = 1;
          setTimeout(function() {
            flashBox.style.height = '0px';
            flashBox.style.padding = '0px';
            flashBox.style.marginTop = '0px';
            flashBox.style.marginBottom = '0px';
            flashBox.style.opacity = 0;  
          }, 0);
          setTimeout(function() {
            flashBox.parentNode.removeChild(flashBox);
          }, 500);          
        }, 2000);
        editors[0].editor.focus();
      }
    }

    function setButtonLabel(button, label) {
      button.innerHTML = label + '<div class="overlay"></div>';
      return true;
    }

    function resetCommentEditor() {      
      setupCreate();
      var comment = {body: '', User: {}};
      if (#{!!locals.user}) {
        comment.User.displayName = '#{(locals.user && locals.user.displayName) || ''}';
        comment.User.photoUrl = '#{(locals.user && locals.user.photoUrl) || ''}';
        fillCommentPreview(comment);
        document.querySelector('.comment-editor .comment.new-comment .user-link').target = '_blank';
      } else {
        comment.User.displayName = 'Please log in';
        comment.User.photoUrl = '/images/default-profile.jpg';
        fillCommentPreview(comment);
        document.querySelector('.comment-editor .comment.new-comment .user-link').href = '/login';
        document.querySelector('.comment-editor .comment.new-comment .user-link').target = '_self';
      }      
      window.location.href = '#new-comment';
      editors[0].editor.focus();
    }
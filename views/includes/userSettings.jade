mixin descriptiveFieldSet(label, name, value, placeholder, note, secret, autofocus)
  fieldset(class=name)
    label(for=name)= label + ':'
    if (secret===true)
      input(type="password", name=name, value=value, placeholder=placeholder, autofocus=autofocus).encrypt
    else 
      input(type="text", name=name, value=value, placeholder=placeholder, autofocus=autofocus)
    span.field-sublabel!= note

if (locals.update)
  p.form-description Change your user settings here. Other users will not be able to see your email address.
else
  p.form-description Otherwise, only a username, email, and password are required. You will need to solve a captcha and verify your email address to prove that you're human. Other users will not be able to see your email address.
+descriptiveFieldSet('First Name', 'givenName', temporaryUser.givenName || '', 'First Name', undefined, undefined, true)
+descriptiveFieldSet('Middle Name', 'middleName', temporaryUser.middleName || '', 'Middle Name', 'for completeness\' sake')
+descriptiveFieldSet('Last Name', 'familyName', temporaryUser.familyName || '', 'Last Name')
+descriptiveFieldSet('Username', 'displayName', temporaryUser.displayName || '', 'Username', 'required, must be from 1 to 64 characters')
if (locals.update)
  +descriptiveFieldSet('Email', 'email', temporaryUser.email || '', 'Email', '<button type="button" disabled class="verify-email" tabindex="100">Verify email address</button>')
  +descriptiveFieldSet('Old Password', 'oldPassword', '', 'Old Password', '<button type="button" class="reset-password" tabindex="101" onclick="return notImplemented();">Reset password</button>', true)
  +descriptiveFieldSet('New Password', 'password', '', 'New Password', 'must be from 8 to 64 characters', true)
else
  +descriptiveFieldSet('Email', 'email', temporaryUser.email || '', 'Email', 'required')
  +descriptiveFieldSet('Password', 'password', '', 'Password', 'required, must be from 8 to 64 characters', true)
+descriptiveFieldSet('Password Confirmation', 'passwordConfirmation', '', 'Password Confirmation', undefined, true)
+descriptiveFieldSet('Picture', 'photoUrl', temporaryUser.photoUrl || '', 'Picture URL', 'a url to a picture, e.g. http://example.com/me.jpg')
if (!locals.update)
  fieldset.captcha!= captcha
    span.field-sublabel
.wmd-panel
h2 Describe Yourself
#wmd-button-bar.wmd-button-bar
#wmd-editor.wmd-editor.wmd-panel.tex2jax_ignore= temporaryUser.biography || ''
textarea(name="biography")#wmd-input.wmd-input= temporaryUser.biography || ''
.wmd-panel 
  img.profile-preview(src=temporaryUser.photoUrl || "/images/default-profile.jpg", alt="Your picture URL is broken")
  #wmd-preview.wmd-preview
  if (locals.update)
    button.submit-button(type="submit", disabled=true) Update
      .overlay
  else
    button.submit-button(type="submit") Register
      .overlay
append body
  script.
    var photoUrl = document.getElementById('registration-form').querySelector('input[name="photoUrl"]');
    photoUrl.addEventListener('input', function(event) {
      document.querySelector('img.profile-preview').src = this.value || '/images/default-profile.jpg';  
    });
    // user existence
    var currentDisplayName = '#{temporaryUser.displayName || ''}';
    var displayNameInput = document.querySelector('input[name="displayName"]');
    var displayNameField = displayNameInput.parentNode;
    var displayNameLabel = displayNameField.querySelector('span.field-sublabel');
    var userExistsRequest = new XMLHttpRequest();
    userExistsRequest.addEventListener('load', function(event) {
      var response = typeof this.response === 'string' ? JSON.parse(this.response) : this.response;
      if (response.error) {
        displayNameLabel.textContent = 'this username is available';
        displayNameLabel.classList.remove('error');
        displayNameLabel.classList.add('success');
      } else if (response.displayName === currentDisplayName) {
        displayNameLabel.textContent = 'required, must be from 1 to 64 characters';
        displayNameLabel.classList.remove('success');
        displayNameLabel.classList.remove('error');
      } else {
        displayNameLabel.textContent = 'this username is already taken';
        displayNameLabel.classList.remove('success');
        displayNameLabel.classList.add('error');
      }
    }, false);
    displayNameInput.addEventListener('input', function(event) {
      if (this.value) {
        userExistsRequest.abort();
        userExistsRequest.open('GET', '/user/' + this.value);
        userExistsRequest.setRequestHeader('Accept', 'application/json');
        userExistsRequest.responseType = 'json';
        userExistsRequest.send();        
      } else {
        displayNameLabel.textContent = 'required, must be from 1 to 64 characters';
        displayNameLabel.classList.remove('success');
        displayNameLabel.classList.remove('error');
      }
    });
    function notImplemented() {
      alert('This feature is not yet implemented. Contact me if you need this feature.');
      return false;
    }
    